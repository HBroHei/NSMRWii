ARCHIVE STRUCTURE:

--course
----course1.bin(level info, entities?)
----course1_bgdatL0.bin(Tiles info, layer 0)
----course1_bgdatL1.bin(Tiles info, layer 1)
----course1_bgdatL2.bin(Tiles info, layer 2)

-area number is followed by "course". e.g. course1 = Area 1, course3 = Area 3, etc.
-If no tiles were presented, 0xFFFF is stored for bgdat file

-For the bytes after the string names, a bunch of 0x00 will appear
    -The number of 0x00 are usually in the multple of 8, i.e.8,16,32
    -Divide the number by 8, you will get the number of area(s) of that level.
    -Number can never exceed 32. Levels with 4 areas will not contains the 0x00 array.

-Between file datas, an array of 0x00 will appear
    -NEEDS INVESTIGATING

FILE STRUCTUIRE
1. course1.bin
(Reference and further info: see reggie.py in Reggie Editor Source, search up self.block)

    HEAD:
    8 bytes for each section (referenced as blocks in Reggie Source), 14 Sections in total, 112 bytes total
    format:
        -First 4 bytes: Unsigned Int for the offset to the setting
        -Second 4 bytes: Unsigned Int for the size of that setting

    After Head:
    -OPTIONAL Level Description, added by the Reggie Editor
    -Size can be calculated by (First section's offset)-(0x70)
        -0x70 = Size of head

    Sections:
        SECTION 0: TILESET NAMES
        32x4 = 128 bytes (No multiple entries)
        Format:
            32 bytes for each tileset name section.
            First few bytes is the name in string.
            (The rest of the strig is filled with 0x00)

        SECTION 1: LEVEL PROPERTIES
        20 bytes for each entry
        Format:                                [TODO] SEARCH FOR ACTUAL DESCRIPTION
            Offset  DataType(C)  DataType(Py)  Description
            0x00    UnsignedInt  Integer       Event A
            0x04    UnsignedInt  Integer       Event B
            0x08    UnsignShort  Integer       Wrap Byte
            0x0A    Short        Integer       Time Limit
            0x0C    _Bool        Bool          Credit Flag
            0x0D    Unsign Char  Integer       UNKNOWN
            0x0E    PaddingByte     /          -From 0E to 0F       
            0x10    Unsign Char  Integer       Level spawn (Entrance)
            0x11    _Bool        Bool          Ambush flag
            0x12    Unsign Char  Integer       Toad Hse Flag
            0x13    PaddingByte     /          -Only 1 byte

        SECTION 2: ZONES (Camera Properties)
        24 bytes for each entry
        Format:
            Offset  DataType(C)  DataType(Py)  Description
            0x00    Signed Long  Integer       Camera Scroll Upper Bound (Normal)
            0x04    Signed Long  Integer       Camera Scroll Lower Bound (Normal)
            0x08    Signed Long  Integer       Camera Scroll Upper Bound (in Lakitu Cloud)
            0x0C    Signed Long  Integer       Camera Scroll Lower Bound (in Lakitu Cloud)
            0x10    UnsignShort  Integer       "Entry ID"
            0x12    UnsignShort  Integer       Map Camera Zoom adjust
            0x14    SignedShort  Integer       Multiplayer Upper Bounds
            0x16    SignedShort  Integer       Multiplayer Lower Bounds

        SECTION 3: UNKNOWN (LEVEL PROPERTIES PART 2?)
        2 datas (According to reggie)
            0x02 to 0x03, 0x04 to 0x05, all as unsigned shorts (UnkVal1 and 2)

        SECTION 4: ZONES TOP BACKGROUND / SECTION 5: ZONES BOTTOM BACKGROUND
        Stores the config for which image background to load for zones (referenced in section 9)
        Both sections uses the same format as below
        16 bytes for each entry
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    PaddingByte  /             -only 1 byte
            0x01    Unsign Char  Integer       ID
            0x02    SignedShort  Integer       X Scroll rate
            0x03    SignedShort  Integer       Y Scroll rate
            0x04    SignedShort  Integer       Default Image Scroll Y Pos
            0x05    SignedShort  Integer       Default Image scroll X pos
            0x06    UnsignShort  Integer       First Background
            0x07    UnsignShort  Integer       Middle Background
            0x08    UnsignShort  Integer       Last Background
            0x09    PaddingByte  /             -From 0x09 to 0x0B
            0x0C    Unsign Char  Integer       Zoom Level (0 = 100%, 1 = 125%, up to 200%)
            0x0D    PaddingByte  /             -From 0x0D to 0x10

        SECTION 6: ENTRANCE
        20 bytes for each entrance entry
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    UnsignShort  Integer       X Position of the entrance
            0x02    UnsignShort  Integer       Y Position of the entrance
            0x04    PaddingByte     /          -From 04 to 07
            0x08    Unsign Char  Integer       Entrance ID
            0x09    Unsign Char  Integer       Destination Area ID (0 for local(In-area) travel)
            0x0A    Unsign Char  Integer       Destination Entrance ID
            0x0B    Unsign Char  Integer       Entrance Type, see [1] below / Reggie Editor
            0x0C    PaddingByte     /          -Only 1 byte
            0x0D    Unsign Char  Integer       Zone ID(Which zone is the entrance located)???
            0x0E    Unsign Char  Integer       Layer of the Entrance
            0x0F    Unsign Char  Integer       Path (TODO find out what it mean)
            0x10    UnsignShort  Integer       Entrance Settings (See [2])
            0x12    PaddingByte     /          -From 12 to 13 

        [1]: Entrance type list (incomplete)
        0: Normal
        3: Upward Pipe
        4: Downward Pipe
        5: Leftward Pipe
        [2]: Each properties adds a specific value to the orginal value.
        e.g. Enterable + Spawn Half Block In = 80 + 40 = C0 (In Base 16/Hex value)
        To check if the entrance has specific property, use bitwise AND (if returned 0, property is disabled/False)

        SECTION 7: SPRITES
        16 bytes for each sprites data entry
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    UnsignShort  Integer       Sprite ID {1}
            0x02    UnsignShort  Integer       X Position {2}
            0x04    UnsignShort  Integer       Y Position {2}
            0x06    Char[6]      Bytes[6]      Raw Data (Properties) {3}
            0x0B    Char[1]      Byte          Zone ID to be loaded
            0x0C    ???             /          TODO check what it is
            0x0D    PaddingByte     /          -from 0D to 0E

        {1} Refer to the datas in Reggie Editor for ID list
        {2} Position is the tile position*16 (i.e. 1,1 = 16,16)
        {3} Most of the time is a flag(i.e. 0 or 1), but it is actually a hex value

        SECTION 8: LOADED SPRITES
        Used to identify the reources needed to load the sprites in the level
        4 bytes for each entry
        Format: 2 bytes for the ID, with 2 padding bytes

        SECTION 9: ZONE (DATA)
        Used to identify the zone that the player and the camera can move around
        25 bytes for each entry
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    UnsignShort  Integer       Start X of the zone (In obj form, i.e. *16=tilePos)
            0x02    UnsignShort  Integer       Start Y of the zone (In obj form)
            0x04    UnsignShort  Integer       Width of the zone
            0x06    UnsignShort  Integer       Height of the zone
            0x08    UnsignShort  Integer       Zone theme
            0x0A    UnsignShort  Integer       Terrain Lighting type
            0x0C    Unsign Char  Integer       Zone ID
            0x0D    Unsign Char  Integer       Zone Bound settings? (sth related to section 2??)
            0x0E    Unsign Char  Integer       Camera Mode
            0x0F    Unsign Char  Integer       Camera Zoom Level?
            0x10    PaddingByte  /             -only 1 byte
            0x11    Unsign Char  Integer       Darkness effect (TODO looks like some bitwising)
            0x12    Unsign Char  Integer       Top background ("Scenery" in reggie?) (Ref. section 3)
            0x13    Unsign Char  Integer       Bottom background ("Backdrop" in reggie?) (Ref. section 4)
            0x14    Unsign Char  Integer       Camera Autoscroll Track ID?
            0x15    PaddingByte  /             -From 0x15-0x16
            0x17    Unsign Char  Integer       Music
            0x18    Unsign Char  Integer       Effects modifier (Caves Echo, etc)

        SECTION 10: LOCATIONS
        Used to define areas for objects (*e.g. clouds) / event triggers / entrance area / etc
        11 bytes for each entry
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    UnsignShort  Integer       X Pos
            0x02    UnsignShort  Integer       Y Pos
            0x04    UnsignShort  Integer       Width
            0x06    UnsignShort  Integer       Height
            0x08    Unsign Char  Integer       ID
            0x09    PaddingByte  /             -From 0x09 to 0x0B

        SECTION 11: CAMERA PROFILES
        Used in conjunction with Events for event-based camera movement
        ## NOTE: 1st camera profile must be a dummy profile due to bug.
        20 bytes for each entry
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    PaddingByte  /             -From 0x00 to 0x0B
            0x0C    Unsign Char  Integer       TODO "bgngid" (number of zones+1?)
            0x0D    Unsign Char  Integer       Camera movement type
            0x0E    Unsign Char  Integer       Zoom Scale (0=14, etc. See reggie for list of options)
            0x0F    Unsign Char  Integer       ??? (Seems to be always be 0)
            0x10    PaddingByte  /             -From 0x10 to 0x11
            0x12    Unsign Char  Integer       Event ID
            0x13    PaddingByte  /             -Only 1 byte

        SECTION 12: PATH (TODO verify them)
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    Unsign Char  Integer       ID
            0x01    PaddingByte  /             -only 1 byte
            0x02    UnsignShort  Integer       Start node ID
            0x04    UnsignShort  Integer       Number of nodes
            0x06    UnsignShort  Integer       Unknown
        
        SECTION 13: PATH NODES (TODO Verify them)
        Format: (All offset from the start of the entry)
            Offset  DataType(C)  DataType(Py)  Description
            0x00    UnsignShort  Integer       X Pos
            0x02    UnsignShort  Integer       Y Pos
            0x04    Float        Float         Speed
            0x08    Float        Float         Accelerate
            0x0C    SignedShort  Integer       Delay
            0x0E    PaddingByte  /             -From 0x0E to 0x0F

2.course1_bgdatL0/L1/L2.bin
(Ref.: loadLayer in reggie source)

    HEAD: NONE

    BODY: An array of tile (block) infos. Each tile info is 10 bytes
    Format: (All offset from the start of the entry)
        Offset  DataType(C)  DataType(Py)  Description
        0x00    UnsignShort  Integer       The tile object ID {1}
        0x02    UnsignShort  Integer       The x cord of the tile
        0x04    UnsignShort  Integer       The y cord of the tile
        0x06    UnsignShort  Integer       The width of the tile
        0x08    UnsignShort  Integer       The height of the tile
    -No space between tile infos.
    -Last 2 bytes is always FFFF
    {1} Every 4095 (Hex FFF, Bin 1111 1111 1111) IDs will be in a group (e.g. 0-4095, 4096-8190) (Named "Tileset" in reggie)
        The tile texture of the individual groups are determined by Section 0 from "course1.bin"
        Bitwise AND the value with 4095 will yield the tile ID
        -Determine the tileset / Group: TileObjID % 4095
            -Check TileObjID<4095 beforehand. If true, it belongs to group 0 (No calculation is needed)
        -Determine thw tile object ID in each group: TileObjID & 4095
    

SOURCE: Reggie! Level Editor
Useful Links: https://horizon.miraheze.org/wiki/Main_Page